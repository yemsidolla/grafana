// Grafana Alloy Configuration - Central Server
// Collects and forwards data to Loki and Prometheus from remote agents

// =============================================================================
// PROMETHEUS METRICS COLLECTION AND FORWARDING
// =============================================================================

// System metrics exporter (local)
prometheus.exporter.unix "local_system" {
  procfs_path = "/proc"
  sysfs_path = "/sys"
}

// Scrape local system metrics
prometheus.scrape "local_system_metrics" {
  targets         = prometheus.exporter.unix.local_system.targets
  forward_to      = [prometheus.relabel.filter_metrics.receiver]
  scrape_interval = "15s"
}

// Filter and relabel metrics
prometheus.relabel "filter_metrics" {
  rule {
    action        = "keep"
    source_labels = ["__name__"]
    regex         = "(node_.*|process_.*|go_.*)"
  }
  
  rule {
    action        = "replace"
    source_labels = ["__name__"]
    target_label  = "metric_type"
    regex         = "node_(.+)"
    replacement   = "system"
  }

  forward_to = [prometheus.remote_write.prometheus_service.receiver]
}

// Write metrics to Prometheus
prometheus.remote_write "prometheus_service" {
  endpoint {
    url = "http://prometheus:9090/api/v1/write"
  }
}

// Scrape remote agents
prometheus.scrape "remote_agents" {
  targets = [
    // Example remote agents - update with actual IPs/hostnames
    {"__address__" = "agent1:9100", "job" = "node-exporter", "instance" = "agent1"},
    {"__address__" = "agent1:8080", "job" = "cadvisor", "instance" = "agent1"},
    {"__address__" = "agent2:9100", "job" = "node-exporter", "instance" = "agent2"},
    {"__address__" = "agent2:8080", "job" = "cadvisor", "instance" = "agent2"},
    {"__address__" = "agent3:9100", "job" = "node-exporter", "instance" = "agent3"},
    {"__address__" = "agent3:8080", "job" = "cadvisor", "instance" = "agent3"},
  ]
  forward_to = [prometheus.remote_write.prometheus_service.receiver]
  scrape_interval = "15s"
}

// =============================================================================
// LOKI LOG COLLECTION AND FORWARDING
// =============================================================================

// Local file discovery
local.file_match "local_files" {
  path_targets = [
    {__path__ = "/var/log/*.log", job = "system"},
    {__path__ = "/var/log/syslog", job = "system"},
    {__path__ = "/var/log/auth.log", job = "auth"},
  ]
}

// Scrape log files
loki.source.file "log_scrape" {
  targets    = local.file_match.local_files.targets
  forward_to = [loki.process.filter_logs.receiver]
  tail_from_end = true
}

// Filter non-essential logs
loki.process "filter_logs" {
  stage.drop {
    source = ""
    expression  = ".*Connection closed by authenticating user root"
    drop_counter_reason = "noisy"
  }
  forward_to = [loki.write.loki_service.receiver]
}

// Write logs to Loki
loki.write "loki_service" {
  endpoint {
    url = "http://loki:3100/loki/api/v1/push"
  }
}

// Collect Docker container logs
loki.source.docker "container_logs" {
  host = "unix:///var/run/docker.sock"
  targets = [
    {__path__ = "/var/lib/docker/containers/*/*-json.log", job = "docker"},
  ]
  forward_to = [loki.write.loki_service.receiver]
}

