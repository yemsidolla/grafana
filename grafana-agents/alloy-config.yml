// =============================================================================
// GRAFANA ALLOY CONFIGURATION - CLEAN MULTI-HOST MONITORING
// =============================================================================
// This configuration runs on each Docker host to collect:
// 1. Docker container logs with clear hostname identification
// 2. System logs with clear hostname identification
// 3. Forward all data to central Grafana Loki server
//
// USAGE:
// 1. Deploy this agent on each Docker host you want to monitor
// 2. Set HOSTNAME environment variable to unique host identifier
// 3. Set LOKI_URL to point to central server
// 4. Agent will automatically discover and monitor all Docker containers
//
// ENVIRONMENT VARIABLES REQUIRED:
// - HOSTNAME: Unique identifier for this host (e.g., "web-server-01")
// - LOKI_URL: Central Loki endpoint (e.g., "http://central-server:3100")
// =============================================================================

// =============================================================================
// DOCKER CONTAINER LOG COLLECTION
// =============================================================================
// Collects Docker container logs with docker_by_host label for easy filtering

// Discover Docker containers automatically
discovery.docker "docker_discovery" {
  host = "unix:///var/run/docker.sock"
}

// Collect Docker container logs
loki.source.docker "docker_logs" {
  host    = "unix:///var/run/docker.sock"
  targets = discovery.docker.docker_discovery.targets
  
  // Only collect logs from now onwards (avoid old log replay)
  since = "1h"
  
  // Extract container metadata using relabel rules
  relabel_rules = [
    {
      source_labels = ["__meta_docker_container_name"]
      target_label  = "container"
    },
    {
      source_labels = ["__meta_docker_container_image"]
      target_label  = "image"
    },
    {
      source_labels = ["__meta_docker_container_log_stream"]
      target_label  = "stream"
    }
  ]
  
  forward_to = [loki.process.docker_processor.receiver]
}

// Process Docker logs with host identification and log level detection
loki.process "docker_processor" {
  // Extract log level from log content
  stage.regex {
    source = "output"
    expression = "(?P<level>ERROR|WARN|INFO|DEBUG|TRACE|FATAL|PANIC|CRITICAL|EMERGENCY)"
  }
  
  
  // Format log with hostname, service, and level
  stage.template {
    source = "output"
    template = "[HOST: {{ env \"HOSTNAME\" | default \"unknown-host\" }}] [SERVICE: {{ .container }}] [LEVEL: {{ .level | default \"INFO\" }}] {{ .output }}"
  }
  
  stage.static_labels {
    values = {
      docker_by_host = env("HOSTNAME"),
    }
  }
  
  forward_to = [loki.write.loki_output.receiver]
}

// =============================================================================
// SYSTEM LOG COLLECTION
// =============================================================================
// Collects system logs with sys_log label for easy filtering

// Discover system log files to monitor
local.file_match "sys_logs" {
  path_targets = [
    {__path__ = "/var/log/*.log", job = "sys_log"},
    {__path__ = "/var/log/syslog", job = "sys_log"},
    {__path__ = "/var/log/auth.log", job = "sys_log"},
  ]
}

// Tail and collect system log files
loki.source.file "sys_logs" {
  targets    = local.file_match.sys_logs.targets
  forward_to = [loki.process.sys_log_processor.receiver]
  tail_from_end = true
}

// Process system logs with host identification and log level detection
loki.process "sys_log_processor" {
  // Extract log level from log content
  stage.regex {
    source = "output"
    expression = "(?P<level>ERROR|WARN|INFO|DEBUG|TRACE|FATAL|PANIC|CRITICAL|EMERGENCY)"
  }
  
  // Format log with hostname, service, and level
  stage.template {
    source = "output"
    template = "[HOST: {{ env \"HOSTNAME\" | default \"unknown-host\" }}] [SERVICE: system] [LEVEL: {{ .level | default \"INFO\" }}] {{ .output }}"
  }
  
  stage.static_labels {
    values = {
      sys_log = env("HOSTNAME"),
    }
  }
  
  forward_to = [loki.write.loki_output.receiver]
}

// =============================================================================
// FORWARD LOGS TO LOKI
// =============================================================================
loki.write "loki_output" {
  endpoint {
    url = env("LOKI_URL") + "/loki/api/v1/push"
  }
}